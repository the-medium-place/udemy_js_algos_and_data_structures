"FREQUENCY COUNTERS"
====================
This pattern uses objects or sets to collect values/frequencies of values
This can often avoid the ned for nested loops or O(n^2) operations with arrays/strings

    Example: 
    write a function called 'same', which accepts two arrays. The function should return tru if every value in the array has it's corresponding value squared in the same array. The frequency of values must be the same.
    same([1, 2, 3], [4, 1, 9]) // true
    same([1, 2, 3], [1, 9]) // false
    same([1, 2, 1], [4, 4, 1]) // false (must be same frequency)

"MULTIPLE POINTERS"
===================
Creating PONTERS or values that correspond to an index or position and move towards the beginnint, end or middle based on a certain condition

--VERY efficient for solving problems with minimal space complexity as well

    Example:
    Write a function called sumZero which accepts a *sorted* array of integers.  The function should find the FIRST pair where the sum is 0.  Return an array that includes both values that sum to zero or undefined if a pair does not exist.
    sumZero([-3, -2, -1, 0, 1, 2, 3]) // [-3, 3]
    sumZero([-2, 0, 1, 3]) // undefined
    sumZero([1, 2, 3]) // undefined

"SLIDING WINDOW"
================
creating a 'window' which can either be an array or number from one position to another.
Depeinding on a certain condition, the window either increaes or closes (and new window is created)

Very useful for keeping track of a subset of data in an array/string etc...

    Example:
    Write a function called maxSubarraySum which accepts an array of integers and a number called 'n'.  The function should calculate the maximum sum of 'n' consecutive elements in the aray.
    maxSubarraySum([1, 2, 5, 2, 8, 1, 5], 2) // 10
    maxSubarraySum([1, 2, 5, 2, 8, 1, 5], 4) // 17
    maxSubarraySum([4, 2, 1, 6], 1) // 6
    maxSubarraySum([4, 2, 1, 6, 2], 4) // 13
    maxSubarraySum([], 4) // null

"DIVIDE AND CONQUER"
====================
This pattern involves dividing a data set into smaller cunks and then repeating a process with a subset of data. 

This pattern can tremendously **decrease time complexity**
(this is how binary search works)

time complexity of Log(n) - BINARY SEARCH!!

    Example:
    Given a 'sorted' aray of integers, write a function called 'search' that accepts a value and returns the index where the value passed into the function is located.  If teh value is not found, return -1.

    search([1, 2, 3, 4, 5, 6], 4) // 3
    search([1, 2, 3, 4, 5, 6], 6) // 5
    search([1, 2, 3, 4, 5, 6], 11) // -1

    
