ALGORITHMS AND PROBLEM SOLVING PATTERNS:
+++++++++++++++++++++++++++++++++++++++++
1 - devise a plan for solving problems
2 - master common problem solving patterns 

"How To Solve It" - George Polya

    Understanding The Problem:
    ==========================
    * Can i restate the problem in my own words?
    * What are the inputs that go into the problem?
    * What are the outputs that should come from the solution to the problem?
    * Can the outputs be determined from the inputs? (Do I have enough info?)
    * How should I label the important pieces of data that are a part of the problem?

    Exploring concrete Examples:
    ============================
    -coming up with examples to understand the problem beter
    -examples also provide sanity checks that your eventual solution works how it should
    -User Stories! Unit Tests! 
    * Start with *simple* examples
    * progress to more complex examples
    * explore examples with empty inputs
    * explore examples with invalid inputs

    Break It Down:
    ==============
    -take the actual steps and write them down 
    * Explicitly write out the steps you need to take
        - forces you to think about the code you'll write BEFORE writing it

    Solve or Simplify:
    ==================
    * Solve the problem if you can... but if you can't, SOLVE A SIMPLER PROBLEM!
        - find the core difficulty in what you're trying to do
        - temporarily ignore that difficulty
        - write a simplified solution
        - then incorporate that difficulty back in

    Look Back and Refactor:
    =======================
    * Can you check the result?
    * Can you derive the result differently? 
    * Can you understand it at a glance?
    * Can you use the result or method for some other problem?
    * can you improve the performance of your solution?
    * can you think of other ways to refactor?
    * How have other people solved this problem?





